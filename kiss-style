#!/bin/sh

# Also used as warn color
lcol="\033[1;33m"

# Used as primary color
lcol2="\033[1;34m"

# Used as error color
lcol3="\033[1;31m"

lclr="\033[m"

failed=0
suppress_warn=0

log() {
    printf '%b%s %b%s%b %s\n' \
        "$lcol" "${3:-->}" "${lclr}${2:+$lcol2}" "$1" "$lclr" "$2" >&2
}

war() {
	if [ $suppress_warn -eq 1 ]; then
		return
	fi

    printf '%b%s%b:\n' \
        "$lcol2" "$file" "$lclr"
    log "$1" "$2" "${3:-WARNING}"
    echo
}

err() {
    printf '%b%s%b:\n' \
        "$lcol2" "$file" "$lclr"

    printf '%b%s%b %s\n' \
        "$lcol3" "ERR ->" "$lclr" "$1"

    printf '%b\t%s%b %s\n' \
        "$lcol3" "On line $linenum:" "$lclr" "$2"

    position=$(($(echo "$4" | awk -F":" '{print $1}')+20))
    while [ "$position" -gt 0 ]; do
        printf " "
        position=$((position-1))
    done;
    printf "%b^ Here%b\n" \
        "$lcol" "$lclr"
	export failed=1
}

main() {
	if [ $# -eq 0 ] || [ $1 = "-h" ]; then
		echo "kiss-style [h|v|s] [script]..."
		log "-h" "prints this help dialog"
		log "-v" "displays version information to stdout"
		log "-s" "suppreses warning messages"
		exit
	fi

	case $1 in
		-v) printf "1.0\n" && exit ;;
		-s) suppress_warn=1; shift ;;
	esac

    for arg in "$@"; do
        linenum=1
        prev_indentation=0
        file=$arg
        if [ "$(cat -T "$arg" 2>&1 | head -n 1)" != '#!/bin/sh -e' ]; then
             war "Incorrect shebang. All kiss package build scripts should have \"#!/bin/sh -e\" as their shebang. If this is not a kiss package please ignore this warning."
        fi

        if echo "$arg" | grep -q "cp "; then
            war "You seem to be using \"cp\" in your script. In most cases you should opt for the \"install\" command when possible."
        fi

        while IFS= read -r line; do
            indentation=0
            tmp=$line

            while [ -n "$tmp" ]; do
                rest="${tmp#?}"    
                first="${tmp%"$rest"}"    
                if [ "$first" = " " ]; then
                    indentation=$((indentation+1))
                fi

                if [ "$first" != " " ]; then
                    break
                fi
                tmp="$rest"
            done

            if echo "$line" | grep -q '	'; then
                err "Style guide requires 4 spaces instead of tabs." "$line" "$(echo "$line" | grep -q -o '	' )"
            elif [ $indentation -ne $((prev_indentation+4)) ] && [ $indentation -ne $((prev_indentation-4)) ] && [ $indentation -ne $prev_indentation ] && [ $indentation -ne 0 ]; then
                err "Indentations should each use 4 spaces. Sometimes this error can also be indicative of invisible characters." "$line"
            elif [ "$(echo "$line" | cut -c1-1)" = "#" ] && [ "$(echo "$line" | awk '{print $2}')" != "shellcheck" ]; then
                case "$(echo "$line" | awk '{print $2}' | cut -c1-1)" in
                    ([[:lower:]]) err "Comments should each start with a capital letter." "$line" 3;;
                esac
            fi

            if [ "$(printf \"%s\" "$line" | wc -c)" -gt 80 ]; then
                err "Lines should not exceed 80 characters. Try to find a way to split this line." "$line" 0
            fi

            linenum=$((linenum+1))
            prev_indentation=$indentation
        done < "$arg";
    done;
    
    if [ "$failed" -eq 0 ]; then
        log "Tests completed with no errors." " "
    else
        log "Tests failed" " "
    fi
}

main "$@"
